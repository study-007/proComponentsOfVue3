import { computed as t, unref as i, getCurrentInstance as c, inject as s } from "vue";
import { useGetDerivedNamespace as u } from "../use-namespace/index.mjs";
import { debugWarn as d } from "../../utils/error.mjs";
import { isClient as p } from "../../../../../../registry.npmmirror.com_@vueuse_shared@9.13.0_vue@3.2.36/node_modules/@vueuse/shared/index.mjs";
const r = {
  prefix: Math.floor(Math.random() * 1e4),
  current: 0
}, I = Symbol("elIdInjection"), a = () => c() ? s(I, r) : r, b = (n) => {
  const e = a();
  !p && e === r && d("IdInjection", `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed
usage: app.provide(ID_INJECTION_KEY, {
  prefix: number,
  current: number,
})`);
  const o = u();
  return t(() => i(n) || `${o.value}-id-${e.prefix}-${e.current++}`);
};
export {
  I as ID_INJECTION_KEY,
  b as useId,
  a as useIdInjection
};
