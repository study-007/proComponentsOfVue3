import { useCheckboxDisabled as f } from "./use-checkbox-disabled.mjs";
import { useCheckboxEvent as k } from "./use-checkbox-event.mjs";
import { useCheckboxModel as x } from "./use-checkbox-model.mjs";
import { useCheckboxStatus as C } from "./use-checkbox-status.mjs";
import { isArray as v } from "../../../../../../../../registry.npmmirror.com_@vue_shared@3.3.4/node_modules/@vue/shared/dist/shared.esm-bundler.mjs";
import { useFormItem as F, useFormItemInputId as S } from "../../../form/src/hooks/use-form-item.mjs";
const L = (e, { model: t }) => {
  function i() {
    v(t.value) && !t.value.includes(e.label) ? t.value.push(e.label) : t.value = e.trueLabel || !0;
  }
  e.checked && i();
}, G = (e, t) => {
  const { formItem: i } = F(), { model: o, isGroup: u, isLimitExceeded: a } = x(e), {
    isFocused: r,
    isChecked: c,
    checkboxButtonSize: l,
    checkboxSize: d,
    hasOwnLabel: s
  } = C(e, t, { model: o }), { isDisabled: n } = f({ model: o, isChecked: c }), { inputId: b, isLabeledByFormItem: m } = S(e, {
    formItemContext: i,
    disableIdGeneration: s,
    disableIdManagement: u
  }), { handleChange: h, onClickRoot: I } = k(e, {
    model: o,
    isLimitExceeded: a,
    hasOwnLabel: s,
    isDisabled: n,
    isLabeledByFormItem: m
  });
  return L(e, { model: o }), {
    inputId: b,
    isLabeledByFormItem: m,
    isChecked: c,
    isDisabled: n,
    isFocused: r,
    checkboxButtonSize: l,
    checkboxSize: d,
    hasOwnLabel: s,
    model: o,
    handleChange: h,
    onClickRoot: I
  };
};
export {
  G as useCheckbox
};
