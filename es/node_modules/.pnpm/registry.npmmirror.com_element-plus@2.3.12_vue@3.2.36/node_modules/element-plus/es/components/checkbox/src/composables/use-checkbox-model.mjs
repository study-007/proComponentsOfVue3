import { ref as i, getCurrentInstance as m, inject as c, computed as a } from "vue";
import { checkboxGroupContextKey as v } from "../constants.mjs";
import { isUndefined as f } from "../../../../utils/types.mjs";
import { isArray as p } from "../../../../../../../../registry.npmmirror.com_@vue_shared@3.3.4/node_modules/@vue/shared/dist/shared.esm-bundler.mjs";
import { UPDATE_MODEL_EVENT as x } from "../../../../constants/event.mjs";
const C = (d) => {
  const u = i(!1), { emit: s } = m(), e = c(v, void 0), t = a(() => f(e) === !1), n = i(!1);
  return {
    model: a({
      get() {
        var o, l;
        return t.value ? (o = e == null ? void 0 : e.modelValue) == null ? void 0 : o.value : (l = d.modelValue) != null ? l : u.value;
      },
      set(o) {
        var l, r;
        t.value && p(o) ? (n.value = ((l = e == null ? void 0 : e.max) == null ? void 0 : l.value) !== void 0 && o.length > (e == null ? void 0 : e.max.value), n.value === !1 && ((r = e == null ? void 0 : e.changeEvent) == null || r.call(e, o))) : (s(x, o), u.value = o);
      }
    }),
    isGroup: t,
    isLimitExceeded: n
  };
};
export {
  C as useCheckboxModel
};
