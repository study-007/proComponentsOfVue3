import { shallowRef as v, onMounted as y, onUpdated as h, watch as p } from "vue";
import { useEventListener as b } from "../../../../../../../../registry.npmmirror.com_@vueuse_core@9.13.0_vue@3.2.36/node_modules/@vueuse/core/index.mjs";
import { useNamespace as k } from "../../../../hooks/use-namespace/index.mjs";
import { EVENT_CODE as n } from "../../../../constants/aria.mjs";
function q({ el$: a }, d) {
  const u = k("tree"), t = v([]), i = v([]);
  y(() => {
    m();
  }), h(() => {
    t.value = Array.from(a.value.querySelectorAll("[role=treeitem]")), i.value = Array.from(a.value.querySelectorAll("input[type=checkbox]"));
  }), p(i, (r) => {
    r.forEach((l) => {
      l.setAttribute("tabindex", "-1");
    });
  }), b(a, "keydown", (r) => {
    const l = r.target;
    if (!l.className.includes(u.b("node")))
      return;
    const c = r.code;
    t.value = Array.from(a.value.querySelectorAll(`.${u.is("focusable")}[role=treeitem]`));
    const o = t.value.indexOf(l);
    let e;
    if ([n.up, n.down].includes(c)) {
      if (r.preventDefault(), c === n.up) {
        e = o === -1 ? 0 : o !== 0 ? o - 1 : t.value.length - 1;
        const s = e;
        for (; !d.value.getNode(t.value[e].dataset.key).canFocus; ) {
          if (e--, e === s) {
            e = -1;
            break;
          }
          e < 0 && (e = t.value.length - 1);
        }
      } else {
        e = o === -1 ? 0 : o < t.value.length - 1 ? o + 1 : 0;
        const s = e;
        for (; !d.value.getNode(t.value[e].dataset.key).canFocus; ) {
          if (e++, e === s) {
            e = -1;
            break;
          }
          e >= t.value.length && (e = 0);
        }
      }
      e !== -1 && t.value[e].focus();
    }
    [n.left, n.right].includes(c) && (r.preventDefault(), l.click());
    const f = l.querySelector('[type="checkbox"]');
    [n.enter, n.space].includes(c) && f && (r.preventDefault(), f.click());
  });
  const m = () => {
    var r;
    t.value = Array.from(a.value.querySelectorAll(`.${u.is("focusable")}[role=treeitem]`)), i.value = Array.from(a.value.querySelectorAll("input[type=checkbox]"));
    const l = a.value.querySelectorAll(`.${u.is("checked")}[role=treeitem]`);
    if (l.length) {
      l[0].setAttribute("tabindex", "0");
      return;
    }
    (r = t.value[0]) == null || r.setAttribute("tabindex", "0");
  };
}
export {
  q as useKeydown
};
