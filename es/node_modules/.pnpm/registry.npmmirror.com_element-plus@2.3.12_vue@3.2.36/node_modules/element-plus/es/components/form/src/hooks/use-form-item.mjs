import { inject as c, ref as e, computed as f, onMounted as s, watch as I, toRef as m, onUnmounted as a } from "vue";
import { formContextKey as h, formItemContextKey as w } from "../constants.mjs";
import { useId as y } from "../../../../hooks/use-id/index.mjs";
const j = () => {
  const o = c(h, void 0), u = c(w, void 0);
  return {
    form: o,
    formItem: u
  };
}, B = (o, {
  formItemContext: u,
  disableIdGeneration: n,
  disableIdManagement: i
}) => {
  n || (n = e(!1)), i || (i = e(!1));
  const v = e();
  let r;
  const t = f(() => {
    var l;
    return !!(!o.label && u && u.inputIds && ((l = u.inputIds) == null ? void 0 : l.length) <= 1);
  });
  return s(() => {
    r = I([m(o, "id"), n], ([l, p]) => {
      const d = l ?? (p ? void 0 : y().value);
      d !== v.value && (u != null && u.removeInputId && (v.value && u.removeInputId(v.value), !(i != null && i.value) && !p && d && u.addInputId(d)), v.value = d);
    }, { immediate: !0 });
  }), a(() => {
    r && r(), u != null && u.removeInputId && v.value && u.removeInputId(v.value);
  }), {
    isLabeledByFormItem: t,
    inputId: v
  };
};
export {
  j as useFormItem,
  B as useFormItemInputId
};
