import { inject as L, getCurrentInstance as k, computed as C, watch as x, nextTick as E } from "vue";
import { checkboxGroupContextKey as I } from "../constants.mjs";
import { useFormItem as T } from "../../../form/src/hooks/use-form-item.mjs";
import { debugWarn as w } from "../../../../utils/error.mjs";
const j = (a, {
  model: n,
  isLimitExceeded: o,
  hasOwnLabel: v,
  isDisabled: f,
  isLabeledByFormItem: s
}) => {
  const c = L(I, void 0), { formItem: r } = T(), { emit: i } = k();
  function l(e) {
    var t, u;
    return e === a.trueLabel || e === !0 ? (t = a.trueLabel) != null ? t : !0 : (u = a.falseLabel) != null ? u : !1;
  }
  function m(e, t) {
    i("change", l(e), t);
  }
  function h(e) {
    if (o.value)
      return;
    const t = e.target;
    i("change", l(t.checked), e);
  }
  async function g(e) {
    o.value || !v.value && !f.value && s.value && (e.composedPath().some((d) => d.tagName === "LABEL") || (n.value = l([!1, a.falseLabel].includes(n.value)), await E(), m(n.value, e)));
  }
  const b = C(() => (c == null ? void 0 : c.validateEvent) || a.validateEvent);
  return x(() => a.modelValue, () => {
    b.value && (r == null || r.validate("change").catch((e) => w(e)));
  }), {
    handleChange: h,
    onClickRoot: g
  };
};
export {
  j as useCheckboxEvent
};
