import { defineComponent as g, useSlots as L, inject as z, computed as k, openBlock as b, createElementBlock as d, normalizeClass as m, unref as n, withDirectives as c, isRef as C, withModifiers as x, vModelCheckbox as y, normalizeStyle as D, renderSlot as E, createTextVNode as F, toDisplayString as N, createCommentVNode as G } from "vue";
import { checkboxGroupContextKey as K } from "./constants.mjs";
import { checkboxProps as M, checkboxEmits as U } from "./checkbox.mjs";
import j from "../../../_virtual/plugin-vue_export-helper.mjs";
import { useCheckbox as P } from "./composables/use-checkbox.mjs";
import { useNamespace as R } from "../../../hooks/use-namespace/index.mjs";
const T = ["name", "tabindex", "disabled", "true-value", "false-value"], q = ["name", "tabindex", "disabled", "value"], A = g({
  name: "ElCheckboxButton"
}), H = /* @__PURE__ */ g({
  ...A,
  props: M,
  emits: U,
  setup(h) {
    const B = h, S = L(), {
      isFocused: u,
      isChecked: p,
      isDisabled: v,
      checkboxButtonSize: $,
      model: s,
      handleChange: a
    } = P(B, S), i = z(K, void 0), t = R("checkbox"), V = k(() => {
      var o, e, l, f;
      const r = (e = (o = i == null ? void 0 : i.fill) == null ? void 0 : o.value) != null ? e : "";
      return {
        backgroundColor: r,
        borderColor: r,
        color: (f = (l = i == null ? void 0 : i.textColor) == null ? void 0 : l.value) != null ? f : "",
        boxShadow: r ? `-1px 0 0 0 ${r}` : void 0
      };
    }), w = k(() => [
      t.b("button"),
      t.bm("button", $.value),
      t.is("disabled", v.value),
      t.is("checked", p.value),
      t.is("focus", u.value)
    ]);
    return (o, e) => (b(), d("label", {
      class: m(n(w))
    }, [
      o.trueLabel || o.falseLabel ? c((b(), d("input", {
        key: 0,
        "onUpdate:modelValue": e[0] || (e[0] = (l) => C(s) ? s.value = l : null),
        class: m(n(t).be("button", "original")),
        type: "checkbox",
        name: o.name,
        tabindex: o.tabindex,
        disabled: n(v),
        "true-value": o.trueLabel,
        "false-value": o.falseLabel,
        onChange: e[1] || (e[1] = (...l) => n(a) && n(a)(...l)),
        onFocus: e[2] || (e[2] = (l) => u.value = !0),
        onBlur: e[3] || (e[3] = (l) => u.value = !1),
        onClick: e[4] || (e[4] = x(() => {
        }, ["stop"]))
      }, null, 42, T)), [
        [y, n(s)]
      ]) : c((b(), d("input", {
        key: 1,
        "onUpdate:modelValue": e[5] || (e[5] = (l) => C(s) ? s.value = l : null),
        class: m(n(t).be("button", "original")),
        type: "checkbox",
        name: o.name,
        tabindex: o.tabindex,
        disabled: n(v),
        value: o.label,
        onChange: e[6] || (e[6] = (...l) => n(a) && n(a)(...l)),
        onFocus: e[7] || (e[7] = (l) => u.value = !0),
        onBlur: e[8] || (e[8] = (l) => u.value = !1),
        onClick: e[9] || (e[9] = x(() => {
        }, ["stop"]))
      }, null, 42, q)), [
        [y, n(s)]
      ]),
      o.$slots.default || o.label ? (b(), d("span", {
        key: 2,
        class: m(n(t).be("button", "inner")),
        style: D(n(p) ? n(V) : void 0)
      }, [
        E(o.$slots, "default", {}, () => [
          F(N(o.label), 1)
        ])
      ], 6)) : G("v-if", !0)
    ], 2));
  }
});
var Y = /* @__PURE__ */ j(H, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-button.vue"]]);
export {
  Y as default
};
